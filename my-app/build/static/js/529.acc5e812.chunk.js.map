{"version":3,"file":"static/js/529.acc5e812.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","components/skeleton/Skeleton.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}\r\n     src={img} \r\n     alt={'Error'}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton'\r\n\r\nimport './singleComicPage.scss';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nconst SingleComicPage = () => {\r\n  const { comicId } = useParams();\r\n  const [comic, setComic] = useState(null);\r\n  const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateComic()\r\n  }, [comicId])\r\n\r\n  const updateComic = () => {\r\n    clearError();\r\n    getComic(comicId)\r\n      .then(onComicLoaded)\r\n  }\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  }\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  )\r\n}\r\n\r\nconst View = (({ comic }) => {\r\n  const { title, description, pageCount, thumbnail, language, price } = comic;\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{title}</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">pages: {pageCount}</p>\r\n        <p className=\"single-comic__descr\">Language: {language}</p>\r\n        <div className=\"single-comic__price\">{price}$</div>\r\n      </div>\r\n      <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default SingleComicPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const respons = await fetch(url, { method, body, headers });\r\n\r\n      if (!respons.ok) {\r\n        throw new Error(`Could not fetch ${url}, status ${respons.status}`)\r\n      }\r\n\r\n      const data = await respons.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch (e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => { setError(null) }, [])\r\n\r\n  return { loading, request, error, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, request, error, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=3490c7c250fcd530402c1a42a9667fdb';\r\n  const _baseOffset = 250;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getAllComicses = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n\r\n  const _transformCharacter = (char) => {\r\n    return{\r\n        id: char.id,\r\n        name: char.name,\r\n        description: char.description,\r\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n        homepage: char.urls[0].url,\r\n        wiki: char.urls[1].url,\r\n        comics: char.comics.items,\r\n    }\r\n  } \r\n\r\n  const _transformComics = (comicses) => {\r\n    return{\r\n      id: comicses.id,\r\n      title: comicses.title,\r\n      description: comicses.description || 'There is no description',\r\n      pageCount: comicses.pageCount ? `${comicses.pageCount} p.`: 'No information about the number of pages',\r\n      thumbnail: comicses.thumbnail.path + '.' + comicses.thumbnail.extension,\r\n      resourceURI: comicses.resourceURI,\r\n      language: comicses.textObjects.language || 'en-us',\r\n      price: comicses.prices[0].price,\r\n    }\r\n  }\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComicses, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","Skeleton","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","respons","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","path","extension","homepage","urls","wiki","comics","items","_transformComics","comicses","resourceURI","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComicses"],"sourceRoot":""}