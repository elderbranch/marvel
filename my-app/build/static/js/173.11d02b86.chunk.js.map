{"version":3,"file":"static/js/173.11d02b86.chunk.js","mappings":"6IAGA,MAAMA,UAAsBC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KACpCC,MAAQ,CACNC,OAAO,EACR,CAEDC,iBAAAA,CAAkBC,EAAKC,GACrBC,QAAQC,IAAIH,EAAKC,GACjBG,KAAKC,SAAS,CACVP,OAAO,GAEb,CAEAQ,MAAAA,GACE,OAAIF,KAAKP,MAAMC,OACNS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAGfJ,KAAKK,MAAMC,QACpB,EAGF,S,wGCtBA,MAQA,EARqBF,KAEjBD,EAAAA,EAAAA,KAAA,OAAKI,MAAO,CAAEC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,UAC7FC,IAAKC,EACLC,IAAK,S,8JCEV,MAqDMC,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAElB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAASL,EACzD,IAAIM,EAAW,CAAE,UAAa,SAK9B,MAJkB,wEAAdH,IACAG,EAAW,CAAE,UAAa,aAI1BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBpB,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,OAAKU,IAAKQ,EAAWN,IAAI,mBAAmBW,UAAU,kBAAkBnB,MAAOiB,KAC/EC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBpB,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,KAAGuB,UAAU,mBAAkBpB,SAAEa,KACjChB,EAAAA,EAAAA,KAAA,KAAGuB,UAAU,oBAAmBpB,SAC3Bc,EAAW,GAAAO,OAAMP,EAAYQ,MAAM,EAAG,KAAO,QAAW,iEAE7DH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBpB,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,KAAG0B,KAAMP,EAAUI,UAAU,sBAAqBpB,UAC9CH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,QAAOpB,SAAC,gBAE3BH,EAAAA,EAAAA,KAAA,KAAG0B,KAAMN,EAAMG,UAAU,2BAA0BpB,UAC/CH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,QAAOpB,SAAC,mBAIjC,EAId,EAlFmBwB,KAEf,MAAOZ,EAAMa,IAAWC,EAAAA,EAAAA,UAAS,CAAC,IAE5B,QAAEC,EAAO,MAAEvC,EAAK,aAAEwC,EAAY,WAAEC,IAAeC,EAAAA,EAAAA,MAErDC,EAAAA,EAAAA,YAAU,KACNC,IACA,MAAMC,EAAUC,YAAYF,EAAY,KAExC,MAAO,KACHG,cAAcF,EAAQ,CACzB,GACF,IAEH,MAAMG,EAAgBxB,IAClBa,EAAQb,EAAK,EAGXoB,EAAaA,KACfH,IACA,MAAMQ,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,UAAkC,OAC7DZ,EAAaS,GACRI,KAAKL,EAAa,EAGrBM,EAAetD,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAM,KAC1C6C,EAAUhB,GAAU9B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,IAAM,KAClCC,EAAYlB,GAAWvC,IAAUwB,EAA+B,MAAvBf,EAAAA,EAAAA,KAACa,EAAI,CAACE,KAAMA,IAE3D,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYpB,SAAA,CACtB0C,EACAC,EACAE,GACD1B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBpB,SAAA,EAC/BmB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBpB,SAAA,CAAC,+BACFH,EAAAA,EAAAA,KAAA,SAAM,6CAGrCA,EAAAA,EAAAA,KAAA,KAAGuB,UAAU,oBAAmBpB,SAAC,2BAGjCH,EAAAA,EAAAA,KAAA,UAAQuB,UAAU,sBAAsB0B,QAASd,EAAWhC,UAExDH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,QAAOpB,SAAC,cAE3BH,EAAAA,EAAAA,KAAA,OAAKU,IAAKwC,EAAStC,IAAI,UAAUW,UAAU,gCAE7C,EC4Dd,EA7GkBrB,IAEd,MAAOiD,EAAUC,IAAevB,EAAAA,EAAAA,UAAS,KAClCwB,EAAgBC,IAAqBzB,EAAAA,EAAAA,WAAS,IAC9C0B,EAAQC,IAAa3B,EAAAA,EAAAA,UAAS,MAC9B4B,EAAWC,IAAgB7B,EAAAA,EAAAA,WAAS,IAErC,QAACC,EAAO,MAAEvC,EAAK,iBAAEoE,IAAoB1B,EAAAA,EAAAA,MAE3CC,EAAAA,EAAAA,YAAU,KACN0B,EAAUL,GAAQ,EAAK,GACxB,IAEH,MAAMK,EAAYA,CAACL,EAAQM,KACbP,GAAVO,GACAF,EAAiBJ,GACZX,KAAKkB,EAAiB,EAGzBA,EAAoBC,IACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZZ,GAAYD,GAAY,IAAIA,KAAaY,KACzCT,GAAkBD,IAAkB,IACpCG,GAAUD,GAAUA,EAAS,IAC7BG,GAAaD,GAAaO,GAAM,EAG9BE,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAe5B,IAQjB0B,EAASG,QAAQC,SAAQC,GAAQA,EAAKC,UAAUC,OAAO,yBACvDP,EAASG,QAAQ7B,GAAIgC,UAAUE,IAAI,uBACnCR,EAASG,QAAQ7B,GAAImC,OAAO,EAyChC,MAAMC,EApCN,SAAqBC,GACjB,MAAMD,EAASC,EAAIC,KAAI,CAACP,EAAMQ,KAC1B,IAAI1D,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBkD,EAAKrD,YACLG,EAAW,CAAC,UAAc,WAI1BC,EAAAA,EAAAA,MAAA,MACIC,UAAU,aACVyD,SAAU,EACVC,IAAKC,GAAMhB,EAASG,QAAQU,GAAKG,EAEjCjC,QAASA,KACL/C,EAAMiF,eAAeZ,EAAK/B,IAC1B4B,EAAYW,EAAE,EAElBK,WAAaC,IACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnBpF,EAAMiF,eAAeZ,EAAK/B,IAC1B4B,EAAYW,GAChB,EACF5E,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKU,IAAK6D,EAAKrD,UAAWN,IAAK2D,EAAKvD,KAAMZ,MAAOiB,KACjDrB,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,aAAYpB,SAAEoE,EAAKvD,SAZjCuD,EAAK/B,GAaT,IAIb,OACIxC,EAAAA,EAAAA,KAAA,MAAIuB,UAAU,aAAYpB,SACrByE,GAGb,CAEcW,CAAYpC,GAEpBN,EAAetD,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzC6C,EAAUhB,IAAYuB,GAAiBrD,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,IAAK,KAE1D,OACIzB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYpB,SAAA,CACtB0C,EACAC,EACA8B,GACD5E,EAAAA,EAAAA,KAAA,UACIuB,UAAU,mCACViE,SAAUnC,EACVjD,MAAO,CAAC,QAAWqD,EAAY,OAAS,SACxCR,QAASA,IAAMW,EAAUL,GAAQpD,UACjCH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,QAAOpB,SAAC,kBAEzB,E,aCnGd,MAuCMU,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAEqE,GAAW1E,EAEjE,IAAIM,EAAW,CAAE,UAAa,SAK9B,MAJkB,wEAAdH,IACAG,EAAW,CAAE,UAAa,aAI1BC,EAAAA,EAAAA,MAAAoE,EAAAA,SAAA,CAAAvF,SAAA,EACImB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcpB,SAAA,EACzBH,EAAAA,EAAAA,KAAA,OAAKU,IAAKQ,EAAWN,IAAKI,EAAMZ,MAAOiB,KACvCC,EAAAA,EAAAA,MAAA,OAAAnB,SAAA,EACIH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,kBAAiBpB,SAAEa,KAClCM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYpB,SAAA,EACvBH,EAAAA,EAAAA,KAAA,KAAG0B,KAAMP,EAAUI,UAAU,sBAAqBpB,UAC9CH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,QAAOpB,SAAC,gBAE3BH,EAAAA,EAAAA,KAAA,KAAG0B,KAAMN,EAAMG,UAAU,2BAA0BpB,UAC/CH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,QAAOpB,SAAC,qBAKvCH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,cAAapB,SACvBc,GAA4B,iEAEjCjB,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,eAAcpB,SAAC,aAC9BmB,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBpB,SAAA,CAC5BsF,EAAOxB,OAAS,EAAI,KAAO,yCAExBwB,EAAOX,KAAI,CAACP,EAAMQ,KAEd,KAAIA,EAAI,GAER,OACI/E,EAAAA,EAAAA,KAAA,MAAYuB,UAAU,oBAAmBpB,SACpCoE,EAAKvD,MADD+D,EAEJ,SAKtB,EAQX,EA1FkB7E,IAEd,MAAOa,EAAMa,IAAWC,EAAAA,EAAAA,UAAS,OAE3B,QAAEC,EAAO,MAAEvC,EAAK,aAAEwC,EAAY,WAAEC,IAAeC,EAAAA,EAAAA,MAErDC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACb,CAACjC,EAAMyF,SAEV,MAAMxD,EAAaA,KACf,MAAM,OAAEwD,GAAWzF,EACdyF,IAGL3D,IACAD,EAAa4D,GACR/C,KAAKL,GAAa,EAGrBA,EAAgBxB,IAClBa,EAAQb,EAAK,EAGX6E,EAAW7E,GAAQe,GAAWvC,EAAQ,MAAOS,EAAAA,EAAAA,KAAC6F,EAAAA,EAAQ,IACtDhD,EAAetD,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAM,KAC1C6C,EAAUhB,GAAU9B,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,IAAM,KAClCC,EAAYlB,GAAWvC,IAAUwB,EAA+B,MAAvBf,EAAAA,EAAAA,KAACa,EAAI,CAACE,KAAMA,IAE3D,OACIO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYpB,SAAA,CACtByF,EACA/C,EACAC,EACAE,IACC,E,wECVd,EA1BiB8C,KAEf,MAAOC,EAAcnE,IAAWC,EAAAA,EAAAA,UAAS,MAMzC,OACEP,EAAAA,EAAAA,MAAAoE,EAAAA,SAAA,CAAAvF,SAAA,EACEH,EAAAA,EAAAA,KAACd,EAAAA,EAAa,CAAAiB,UACZH,EAAAA,EAAAA,KAAC2B,EAAU,OAEbL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAepB,SAAA,EAC5BH,EAAAA,EAAAA,KAACd,EAAAA,EAAa,CAAAiB,UACZH,EAAAA,EAAAA,KAACgG,EAAQ,CAACb,eAXM3C,IACtBZ,EAAQY,EAAG,OAYPxC,EAAAA,EAAAA,KAACd,EAAAA,EAAa,CAAAiB,UACZH,EAAAA,EAAAA,KAACiG,EAAQ,CAACN,OAAQI,UAGtB/F,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,gBAAgBb,IAAKwF,EAAYtF,IAAI,aACnD,C,8CC7BP,MAiBA,EAjBiBiF,KAETvE,EAAAA,EAAAA,MAAAoE,EAAAA,SAAA,CAAAvF,SAAA,EACIH,EAAAA,EAAAA,KAAA,KAAGuB,UAAU,eAAcpB,SAAC,kDAC5BmB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUpB,SAAA,EACrBmB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBpB,SAAA,EACnCH,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,4BACfvB,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,6BAEnBvB,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,2BACfvB,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,2BACfvB,EAAAA,EAAAA,KAAA,OAAKuB,UAAU,+B,6CCXxB,MCsDP,EAtDyBU,KACvB,MAAM,QAACH,EAAO,QAAEqE,EAAO,MAAE5G,EAAK,WAAEyC,GDDXoE,MACrB,MAAOtE,EAASuE,IAAcxE,EAAAA,EAAAA,WAAS,IAChCtC,EAAO+G,IAAYzE,EAAAA,EAAAA,UAAS,MA2BnC,MAAO,CAAEC,UAASqE,SAzBFI,EAAAA,EAAAA,cAAYC,eAAOC,GAAwF,IAAnFC,EAAMrH,UAAA4E,OAAA,QAAA0C,IAAAtH,UAAA,GAAAA,UAAA,GAAG,MAAOuH,EAAIvH,UAAA4E,OAAA,QAAA0C,IAAAtH,UAAA,GAAAA,UAAA,GAAG,KAAMwH,EAAOxH,UAAA4E,OAAA,QAAA0C,IAAAtH,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE/FgH,GAAW,GAEX,IACE,MAAMS,QAAgBC,MAAMN,EAAK,CAAEC,SAAQE,OAAMC,YAEjD,IAAKC,EAAQE,GACX,MAAM,IAAIC,MAAM,mBAADzF,OAAoBiF,EAAG,aAAAjF,OAAYsF,EAAQI,SAG5D,MAAMC,QAAaL,EAAQM,OAG3B,OADAf,GAAW,GACJc,CACT,CAAE,MAAO9B,GAGP,MAFAgB,GAAW,GACXC,EAASjB,EAAEgC,SACLhC,CACR,CAEF,GAAG,IAIwB9F,QAAOyC,YAFfuE,EAAAA,EAAAA,cAAY,KAAQD,EAAS,KAAK,GAAI,IAEX,EC5BAF,GAExCkB,EAAW,4CACXC,EAAU,0CAuBVC,EAAuBzG,IACrB,CACFyB,GAAIzB,EAAKyB,GACTxB,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAClBC,UAAWH,EAAKG,UAAUuG,KAAO,IAAM1G,EAAKG,UAAUwG,UACtDvG,SAAUJ,EAAK4G,KAAK,GAAGlB,IACvBrF,KAAML,EAAK4G,KAAK,GAAGlB,IACnBhB,OAAQ1E,EAAK0E,OAAOb,QAIpBgD,EAAoBC,IAClB,CACJrF,GAAIqF,EAASrF,GACbsF,MAAOD,EAASC,MAChB7G,YAAa4G,EAAS5G,aAAe,0BACrC8G,UAAWF,EAASE,UAAS,GAAAvG,OAAMqG,EAASE,UAAS,OAAO,2CAC5D7G,UAAW2G,EAAS3G,UAAUuG,KAAO,IAAMI,EAAS3G,UAAUwG,UAC9DM,YAAaH,EAASG,YACtBC,SAAUJ,EAASK,YAAYD,UAAY,QAC3CE,MAAON,EAASO,OAAO,GAAGD,QAG9B,MAAO,CAACrG,UAASvC,QAAOoE,iBA5CC6C,iBAAiC,IAA1BjD,EAAMlE,UAAA4E,OAAA,QAAA0C,IAAAtH,UAAA,GAAAA,UAAA,GAFlB,IAIlB,aADkB8G,EAAQ,GAAD3E,OAAI8F,EAAQ,8BAAA9F,OAA6B+B,EAAM,KAAA/B,OAAI+F,KACjEJ,KAAKkB,QAAQvD,IAAI0C,EAC9B,EAyC0CzF,aAlCrByE,UACnB,MAAM8B,QAAYnC,EAAQ,GAAD3E,OAAI8F,EAAQ,eAAA9F,OAAcgB,EAAE,MAAAhB,OAAK+F,IAC1D,OAAOC,EAAoBc,EAAInB,KAAKkB,QAAQ,GAAG,EAgCOrG,aAAYuG,eAvC7C/B,iBAAiC,IAA1BjD,EAAMlE,UAAA4E,OAAA,QAAA0C,IAAAtH,UAAA,GAAAA,UAAA,GAPhB,IASlB,aADkB8G,EAAQ,GAAD3E,OAAI8F,EAAQ,0BAAA9F,OAAyB+B,EAAM,KAAA/B,OAAI+F,KAC7DJ,KAAKkB,QAAQvD,IAAI8C,EAC9B,EAoCoFY,SA9BnEhC,UACf,MAAM8B,QAAYnC,EAAQ,GAAD3E,OAAI8F,EAAQ,WAAA9F,OAAUgB,EAAE,MAAAhB,OAAK+F,IACtD,OAAOK,EAAiBU,EAAInB,KAAKkB,QAAQ,GAAG,EA4B+C,C","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/pages/MainPage.js","components/skeleton/Skeleton.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n\r\n  componentDidCatch(err, errorInfo) {\r\n    console.log(err, errorInfo);\r\n    this.setState({\r\n        error: true\r\n    })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}\r\n     src={img} \r\n     alt={'Error'}/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({})\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description ? `${description.slice(0, 199) + ' ...'}` : 'There is no information on the website about this character'}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(250);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\n\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description ? description : 'There is no information on the website about this character'}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary >\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary >\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const respons = await fetch(url, { method, body, headers });\r\n\r\n      if (!respons.ok) {\r\n        throw new Error(`Could not fetch ${url}, status ${respons.status}`)\r\n      }\r\n\r\n      const data = await respons.json();\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch (e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => { setError(null) }, [])\r\n\r\n  return { loading, request, error, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, request, error, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=3490c7c250fcd530402c1a42a9667fdb';\r\n  const _baseOffset = 250;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter)\r\n  }\r\n\r\n  const getAllComicses = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?&${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n\r\n  const _transformCharacter = (char) => {\r\n    return{\r\n        id: char.id,\r\n        name: char.name,\r\n        description: char.description,\r\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n        homepage: char.urls[0].url,\r\n        wiki: char.urls[1].url,\r\n        comics: char.comics.items,\r\n    }\r\n  } \r\n\r\n  const _transformComics = (comicses) => {\r\n    return{\r\n      id: comicses.id,\r\n      title: comicses.title,\r\n      description: comicses.description || 'There is no description',\r\n      pageCount: comicses.pageCount ? `${comicses.pageCount} p.`: 'No information about the number of pages',\r\n      thumbnail: comicses.thumbnail.path + '.' + comicses.thumbnail.extension,\r\n      resourceURI: comicses.resourceURI,\r\n      language: comicses.textObjects.language || 'en-us',\r\n      price: comicses.prices[0].price,\r\n    }\r\n  }\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComicses, getComic}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","err","errorInfo","console","log","this","setState","render","_jsx","ErrorMessage","props","children","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","concat","slice","href","RandomChar","setChar","useState","loading","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","comics","_Fragment","charId","skeleton","Skeleton","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","respons","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","comicses","title","pageCount","resourceURI","language","textObjects","price","prices","results","res","getAllComicses","getComic"],"sourceRoot":""}